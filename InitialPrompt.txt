Analyze the dashboard image example provided.  Identify a set of tables and columns necessary to support the dashboard displayed.
Step 1 - I would like you to build a domain model for the data displayed in the picture of an insurance handling dashboard. The domain model should be implemented in Entity Framework Core 8 for Sql Server.   The domain model should use an long Id column for every entity that will be the primary key.   Please generate a fluent api configuration for the dbcontext that identifies primary keys, foreign key relationships, and required fields.  Please have each of the entities implement lazy loading for their foreign key relationships.   The domain model should be a separate C# project.
Step 2 - I would like you to create a console app that will generate the following claim statuses: notified, pending, approved, rejected, closed.   
        I would like you to generate 40 unique claim agents.   
        I would like you to generate  4000 unique customers, with 1 to 4 claims each that have various claim statuses over the last 18 months.   
        Each of the claims that are not in pending should be assigned to one of the 40 claims agents so that the distribution of claims to agents is even. 90 percent of the claims that are more than 60 days or older should either be approved or rejected.  Claims that are in either approved or closed status 1-2 payments for each claim that does not exceed the approved amount.   Claim payments should all be later than the claim date filed, with total payment amounts not to exceed the claim amount.   The distribution of approved claim amounts should be between 40 and 500000 with a mean of 840. For purposes of email generation I would like you to create an email generator class that supports a customeremailgeneratemethod which accepts a firstname, lastname, and a bool value that says whether or not it needs to be unique or the same email address previously used.   The email address should use one of the populare free email domains such as yahoo, gmail, hotmail, outlook, etc. 
        The generation method for customer email should attempt to use numbers under 4 digits after the last name to make the customer email address unique if the first name and last name have already been generated and the email address needs to be unique.
           The second method should accept a first name, last name, company name and geenrate a unique email address in the fashion firstname.lastname@companyname.com   if the email address for the company already has been generated it should use a number after the last name that increments for each existance of the company email address. 
Step 3 - I would like you to build a C# ASP.NET Core API to support dashboard.  It should incorporate the domain model created in step 1 for data access to support the dashboard.  
Step 4 - Configure a local certificate for encrypted access to the asp.net core api project
Step 5 - Create a responsive front end in Next.JS that will provide an the user interface for the insurance dashboard.   Each of the charts and panels in the dashboard should be a separate component.  The layout and use of the dashboard components should be configurable via a json config file.    
Step 6 â€“ Please generate the launch.config and tasks.config in the root of the workspace to enable debugging of the application.  Please verify that the launch.config for each of the projects is valid with the latest version of  dotnet and node-terminal

